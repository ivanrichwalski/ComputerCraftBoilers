--[[

  CDDL HEADER START

  The contents of this file are subject to the terms of the
  Common Development and Distribution License (the "License").
  You may not use this file except in compliance with the License.

  You can obtain a copy of the license at LICENSE.txt
  or http://opensource.org/licenses/CDDL-1.0.
  See the License for the specific language governing permissions
  and limitations under the License.

  When distributing Covered Code, include this CDDL HEADER in each
  file and include the License file at LICENSE.txt
  If applicable, add the following below this CDDL HEADER, with the
  fields enclosed by brackets "[]" replaced with your own identifying
  information: Portions Copyright [yyyy] [name of copyright owner]

  CDDL HEADER END
 
  Copyright (c) 2013 by Ivan Richwalski. All rights reserved.

  https://github.com/ivanrichwalski/ComputerCraftBoilers
  
  For maximizing fuel efficiency in your liquid fueled boilers.

  Currently configured with a 36HP boiler, to keep the temperature
  between 998 and 1000C. When the temperature drops, 

]]

local lowTemp = 975
local targetTemp = 999
local prevtemp = 0

local monitorTime = 10

boiler = peripheral.wrap("back")
monitor = peripheral.wrap("monitor_3")

while true do

  local temp = tonumber( boiler.getTemperature() )

  local tanks = boiler.getTanks("")  
  local fuel = tanks[3].amount
  local steam = tanks[2].amount

  if ( not fuel ) then
    fuel = 0
  end

  if ( not steam ) then
    steam = 0
  end

  print(" Temp: " .. temp .. " Fuel: " .. fuel )

  monitor.clear()
  monitor.setCursorPos( 1, 2 )
  monitor.write( " Temp: " .. string.format( "%7d", temp ) )
  monitor.setCursorPos( 1, 3 )
  monitor.write( " Fuel: " .. string.format( "%7d", fuel ) )
  monitor.setCursorPos( 1, 4 )
  monitor.write( "Steam: " .. string.format( "%7d", steam ) )

  if ( temp < lowTemp ) then

    -- When below lowTemp, the boiler has a long way to go to
    -- heat up, so have some fuel in the internal fuel tank so
    -- the boiler keeps heating up

    if ( fuel < 2000 ) then

      print( "Below best temperature, valve open")

      redstone.setBundledOutput( "front", colors.white )

      os.sleep( 0.5 )

      redstone.setBundledOutput( "front", 0 )

    end

  elseif ( temp <= targetTemp ) then

    -- Temperature is dropping, time to give another shot of fuel

    if ( temp <= prevtemp ) then

      print( "Pulsing fuel" )

      monitor.setCursorPos( 1, 5 )

      if ( monitor.isColor() ) then
        monitor.setTextColor( colors.yellow )
      end
      monitor.write( "    -- Pulse --" )
      if ( monitor.isColor() ) then
        monitor.setTextColor( colors.white )
      end

      redstone.setBundledOutput( "front", colors.white )

      os.sleep( 0.1 )

      redstone.setBundledOutput( "front", 0 )

    else

      monitor.setCursorPos( 1, 5 )

      if ( monitor.isColor() ) then
        monitor.setTextColor( colors.green )
      end

      monitor.write( "Temp rising" )

      if ( monitor.isColor() ) then
        monitor.setTextColor( colors.white )
      end

    end

  end

  prevtemp = temp

  os.sleep( monitorTime )

end
